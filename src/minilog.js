// Generated by Nyapilot
const formatLog = require("./formatLog")
const support256Color = process.env.TERM.includes('256');
const fs = require('fs');
class MiniLog {
    constructor(prefixes, useTextColor = true) {
        // prefixes est un tableau de string à afficher avant le message
        if (!prefixes){
            //lit le fichier package.json pour récupérer le nom du package
            let packageJS = JSON.parse(fs.readFileSync('package.json'));
            prefixes = [{text: packageJS.name, color: colorize(packageJS.version)}];
        }
        this.prefixes = prefixes;
        this.useTextColor = useTextColor;
    }

    log(...args) { console.log(...formatLog({ level: 'INFO', support256Color, prefixes: this.prefixes, useTextColor: this.useTextColor }, ...args)); }
    l(...args) { this.log(...args); }
    warn(...args) { console.warn(...formatLog({ level: 'WARN', support256Color, prefixes: this.prefixes, useTextColor: this.useTextColor }, ...args)); }
    w(...args) { this.warn(...args); }
    error(...args) { console.error(...formatLog({ level: 'ERROR', support256Color, prefixes: this.prefixes, useTextColor: this.useTextColor }, ...args)); }
    e(...args) { this.error(...args); }
    debug(...args) { console.log(...formatLog({ level: 'DEBUG', support256Color, prefixes: this.prefixes, useTextColor: this.useTextColor }, ...args)); }
    d(...args) { this.debug(...args); }
    success(...args) { console.log(...formatLog({ level: 'SUCCESS', support256Color, prefixes: this.prefixes, useTextColor: this.useTextColor }, ...args)); }
    s(...args) { this.success(...args); }
    info(...args) { console.info(...formatLog({ level: 'INFO', support256Color, prefixes: this.prefixes, useTextColor: this.useTextColor }, ...args)); }
    i(...args) { this.info(...args); }
    console(...args) { console.log(...args); }
    c(...args) { this.console(...args); }
}
//function pour convertire un texte en couleur
function colorize(text){
    const r = Math.floor(text.length);
    const g = parseInt(text, 36) || 0;
    const b = parseInt(text.split('').reverse().join(''));
    return "#" + r.toString(16) + g.toString(16) + b.toString(16);
}
module.exports = MiniLog
