// Generated by Nyapilot
function getStackTrace(startFile = "log.js") {
    try {
        // Capturer la stack trace
        const error = new Error();
        const stackTrace = error.stack || '';

        // Séparer la stack en lignes
        let stackLines = stackTrace.split('\n');

        // Trouver l'index de la dernière ligne contenant "log.js"
        const logJsIndex = stackLines.reduce((lastIndex, line, index) => {
            return line.includes(startFile) ? index : lastIndex;
        }, -1);

        // Si on trouve log.js, on ne garde que les lignes après
        if (logJsIndex !== -1) {
            stackLines = stackLines.slice(logJsIndex + 1);
        }

        // Si pas de stack trace après filtrage, retourner les valeurs par défaut
        if (stackLines.length === 0) {
            return { func: '', file: 'unknown', line: '0' };
        }

        // Prendre la première ligne non vide après le filtrage
        const callerLine = stackLines.find(line => line.trim()) || '';

        // Patterns pour Chrome/Node.js
        const chromePatterns = [
            // Format: "at Function (file:line:column)"
            /^\s*at\s+([^\s]+)\s+\(([^:]+):(\d+):\d+\)$/,
            // Format: "at file:line:column"
            /^\s*at\s+([^:]+):(\d+):\d+$/
        ];

        // Tester d'abord le pattern avec nom de fonction
        let match = callerLine.match(chromePatterns[0]);
        if (match) {
            return {
                func: match[1] || '',
                file: match[2].split('/').pop() || 'unknown',
                line: match[3] || '0'
            };
        }

        // Tester ensuite le pattern sans nom de fonction
        match = callerLine.match(chromePatterns[1]);
        if (match) {
            return {
                func: '',
                file: match[1].split('/').pop() || 'unknown',
                line: match[2] || '0'
            };
        }

        // Si aucun pattern ne correspond
        return {
            func: '',
            file: callerLine.split('/').pop().split(':')[0] || 'unknown',
            line: callerLine.split('/').pop().split(':')[1] || '0'
        };
    } catch (e) {
        console.error('Erreur dans getStackTrace:', e);
        // En cas d'erreur, retourner les valeurs par défaut
        return {
            func: '',
            file: 'unknown',
            line: '0'
        };
    }
}

module.exports = getStackTrace;